Esse projeto é um exemplo comentado-explicativo do uso de PlaygroundBook com LiveView (aquela tela que fica à direita da página) executando continuamente.

É sugerido que você faça o seu projeto inicialmente rodando para iOS (sem book) para depois transferí-lo para cá.

Transferir não é tão complicado:
    - Todos os códigos devem ser colocados a priori na pasta Contents/Sources.
    - Assets (imagens e sons), devem ser postos em Contents/Resources.

No projeto existe um Manifest.plist, visível em Contents com algumas informações configuráveis (bem auto-explicativo)

As páginas criadas podem ser divididas em capítulos, a hierarquia é bem tranquila de compreender. Cada Chapters tem uma pasta Pages e um Manifest.plist (obs: atente-se para que suas páginas estejam indicadas no manifest.plist do capítulo, caso contrário não serão executadas)

(Esse projeto tem somente 1 capítulo e 1 página, e destina-se ao uso landscape do iPad)

Agora a parte importante. Cada pasta que representa uma página tem seu manifest.plist e:

    - Contents.swift: É onde você escreverá o que irá aparecer para o usuário na página e onde ele entrará com o código dele, quando aplicável. Esse arquivo não é usado somente para escrever na página, tenha em mente que ele é EXECUTADO sempre que o usuário toca no botão  "Run Code" (que fica em cima da LiveView)

    - LiveView.swift: ESSE ARQUIVO NÃO É NECESSÁRIO, exceto quando se deseja uma LiveView que rode continuamente. Sem esse arquivo a liveView (UIView,UIViewController,SKView) deve ser criada em Contents.swift, o que só é feito quando o usuário seleciona RunCode. Fazendo a instanciação da liveView neste arquivo (LiveView.swift), a liveView pode ser executada independentemente da execução de Contents.swift (que é o caso deste projeto)

    - Pasta Sources: Aqui entram arquivos adicionais que você pode criar para organizar melhor suas interações. Perceba que os arquivos em Contents/Sources podem ser usados por qualquer página, mas os desta Sources são exclusivas de cada página. Nenhum dos que estão presentes nesse projeto (Commands,Listener,Setup) é obrigatório. Mas tomei a liberdade de criá-los para as seguintes funcionalidades:
        . Commands: para definir as funções de interação da page com a LiveView e executar a comunicação (enviar mensagem para liveView).
        . Listener: para receber as mensagens enviadas pela liveView
        . Setup: Para carregar a liveView e definir o que tiver que ser definido. (pode ser que em todas as pages eu utilize a mesma GameScene, porém em cada uma eu tenha um setup diferente, configurando posições, cores, ou qualquer coisa que eu queria para esta page. O setup da pagina deste projeto por exemplo bota as bandeiras em uma determinada ordem)

No geral, os arquivos feitos em projeto iOS continuam aqui. Somente as classes que serão acessadas a partir da pagina, devem ter suas implementações explicitamente definidas como public (exemplo GameView e GameScene).
Para que a LiveView (que neste caso é GameView) receber mensagens a partir da Contents.swift, é necessário que implemente o protocolo PlaygroundLiveViewMessageHandler e definir a função para recebimento (olhar arquivo em Contents/Sources/GameView). Lembre-se que isso só está sendo necessário pois deseja-se uma LiveView independente da Contents. (independência gera burocracia)

Esse exemplo é relativamente limitado, então qualquer problema podem me contatar (Pietro) que dependendo do que for posso ajudar.

Informações adicionais estão na nebulosa documentação do PlaygroundBook:
https://developer.apple.com/library/content/documentation/Xcode/Conceptual/swift_playgrounds_doc_format/index.html
